// Code generated by mockery v2.52.3. DO NOT EDIT.

package mocks

import (
	context "context"

	data "github.com/ehrktia/lendbook/internal/data"
	mock "github.com/stretchr/testify/mock"
)

// BookQuery is an autogenerated mock type for the BookQuery type
type BookQuery struct {
	mock.Mock
}

type BookQuery_Expecter struct {
	mock *mock.Mock
}

func (_m *BookQuery) EXPECT() *BookQuery_Expecter {
	return &BookQuery_Expecter{mock: &_m.Mock}
}

// GetBooks provides a mock function with given fields: ctx, of, limit
func (_m *BookQuery) GetBooks(ctx context.Context, of int, limit int) ([]data.Book, error) {
	ret := _m.Called(ctx, of, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetBooks")
	}

	var r0 []data.Book
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) ([]data.Book, error)); ok {
		return rf(ctx, of, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) []data.Book); ok {
		r0 = rf(ctx, of, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]data.Book)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, of, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BookQuery_GetBooks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBooks'
type BookQuery_GetBooks_Call struct {
	*mock.Call
}

// GetBooks is a helper method to define mock.On call
//   - ctx context.Context
//   - of int
//   - limit int
func (_e *BookQuery_Expecter) GetBooks(ctx interface{}, of interface{}, limit interface{}) *BookQuery_GetBooks_Call {
	return &BookQuery_GetBooks_Call{Call: _e.mock.On("GetBooks", ctx, of, limit)}
}

func (_c *BookQuery_GetBooks_Call) Run(run func(ctx context.Context, of int, limit int)) *BookQuery_GetBooks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *BookQuery_GetBooks_Call) Return(_a0 []data.Book, _a1 error) *BookQuery_GetBooks_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BookQuery_GetBooks_Call) RunAndReturn(run func(context.Context, int, int) ([]data.Book, error)) *BookQuery_GetBooks_Call {
	_c.Call.Return(run)
	return _c
}

// NewBookQuery creates a new instance of BookQuery. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBookQuery(t interface {
	mock.TestingT
	Cleanup(func())
}) *BookQuery {
	mock := &BookQuery{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
