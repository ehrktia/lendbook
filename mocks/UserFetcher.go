// Code generated by mockery v2.50.4. DO NOT EDIT.

package mocks

import (
	context "context"

	data "github.com/ehrktia/lendbook/internal/data"
	mock "github.com/stretchr/testify/mock"
)

// UserFetcher is an autogenerated mock type for the UserFetcher type
type UserFetcher struct {
	mock.Mock
}

type UserFetcher_Expecter struct {
	mock *mock.Mock
}

func (_m *UserFetcher) EXPECT() *UserFetcher_Expecter {
	return &UserFetcher_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, owner
func (_m *UserFetcher) Create(ctx context.Context, owner data.User) (int64, error) {
	ret := _m.Called(ctx, owner)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, data.User) (int64, error)); ok {
		return rf(ctx, owner)
	}
	if rf, ok := ret.Get(0).(func(context.Context, data.User) int64); ok {
		r0 = rf(ctx, owner)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, data.User) error); ok {
		r1 = rf(ctx, owner)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserFetcher_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type UserFetcher_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - owner data.User
func (_e *UserFetcher_Expecter) Create(ctx interface{}, owner interface{}) *UserFetcher_Create_Call {
	return &UserFetcher_Create_Call{Call: _e.mock.On("Create", ctx, owner)}
}

func (_c *UserFetcher_Create_Call) Run(run func(ctx context.Context, owner data.User)) *UserFetcher_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(data.User))
	})
	return _c
}

func (_c *UserFetcher_Create_Call) Return(_a0 int64, _a1 error) *UserFetcher_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserFetcher_Create_Call) RunAndReturn(run func(context.Context, data.User) (int64, error)) *UserFetcher_Create_Call {
	_c.Call.Return(run)
	return _c
}

// GetBookByUserId provides a mock function with given fields: ctx, ownerId
func (_m *UserFetcher) GetBookByUserId(ctx context.Context, ownerId float64) ([]data.Book, error) {
	ret := _m.Called(ctx, ownerId)

	if len(ret) == 0 {
		panic("no return value specified for GetBookByUserId")
	}

	var r0 []data.Book
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, float64) ([]data.Book, error)); ok {
		return rf(ctx, ownerId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, float64) []data.Book); ok {
		r0 = rf(ctx, ownerId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]data.Book)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, float64) error); ok {
		r1 = rf(ctx, ownerId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserFetcher_GetBookByUserId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBookByUserId'
type UserFetcher_GetBookByUserId_Call struct {
	*mock.Call
}

// GetBookByUserId is a helper method to define mock.On call
//   - ctx context.Context
//   - ownerId float64
func (_e *UserFetcher_Expecter) GetBookByUserId(ctx interface{}, ownerId interface{}) *UserFetcher_GetBookByUserId_Call {
	return &UserFetcher_GetBookByUserId_Call{Call: _e.mock.On("GetBookByUserId", ctx, ownerId)}
}

func (_c *UserFetcher_GetBookByUserId_Call) Run(run func(ctx context.Context, ownerId float64)) *UserFetcher_GetBookByUserId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(float64))
	})
	return _c
}

func (_c *UserFetcher_GetBookByUserId_Call) Return(_a0 []data.Book, _a1 error) *UserFetcher_GetBookByUserId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserFetcher_GetBookByUserId_Call) RunAndReturn(run func(context.Context, float64) ([]data.Book, error)) *UserFetcher_GetBookByUserId_Call {
	_c.Call.Return(run)
	return _c
}

// GetById provides a mock function with given fields: ctx, id
func (_m *UserFetcher) GetById(ctx context.Context, id float64) (data.User, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetById")
	}

	var r0 data.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, float64) (data.User, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, float64) data.User); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(data.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, float64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserFetcher_GetById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetById'
type UserFetcher_GetById_Call struct {
	*mock.Call
}

// GetById is a helper method to define mock.On call
//   - ctx context.Context
//   - id float64
func (_e *UserFetcher_Expecter) GetById(ctx interface{}, id interface{}) *UserFetcher_GetById_Call {
	return &UserFetcher_GetById_Call{Call: _e.mock.On("GetById", ctx, id)}
}

func (_c *UserFetcher_GetById_Call) Run(run func(ctx context.Context, id float64)) *UserFetcher_GetById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(float64))
	})
	return _c
}

func (_c *UserFetcher_GetById_Call) Return(_a0 data.User, _a1 error) *UserFetcher_GetById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserFetcher_GetById_Call) RunAndReturn(run func(context.Context, float64) (data.User, error)) *UserFetcher_GetById_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByEmail provides a mock function with given fields: ctx, email
func (_m *UserFetcher) GetUserByEmail(ctx context.Context, email string) (int64, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByEmail")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (int64, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) int64); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserFetcher_GetUserByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByEmail'
type UserFetcher_GetUserByEmail_Call struct {
	*mock.Call
}

// GetUserByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *UserFetcher_Expecter) GetUserByEmail(ctx interface{}, email interface{}) *UserFetcher_GetUserByEmail_Call {
	return &UserFetcher_GetUserByEmail_Call{Call: _e.mock.On("GetUserByEmail", ctx, email)}
}

func (_c *UserFetcher_GetUserByEmail_Call) Run(run func(ctx context.Context, email string)) *UserFetcher_GetUserByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UserFetcher_GetUserByEmail_Call) Return(_a0 int64, _a1 error) *UserFetcher_GetUserByEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserFetcher_GetUserByEmail_Call) RunAndReturn(run func(context.Context, string) (int64, error)) *UserFetcher_GetUserByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// GetUsers provides a mock function with given fields: ctx
func (_m *UserFetcher) GetUsers(ctx context.Context) ([]data.User, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetUsers")
	}

	var r0 []data.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]data.User, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []data.User); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]data.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserFetcher_GetUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUsers'
type UserFetcher_GetUsers_Call struct {
	*mock.Call
}

// GetUsers is a helper method to define mock.On call
//   - ctx context.Context
func (_e *UserFetcher_Expecter) GetUsers(ctx interface{}) *UserFetcher_GetUsers_Call {
	return &UserFetcher_GetUsers_Call{Call: _e.mock.On("GetUsers", ctx)}
}

func (_c *UserFetcher_GetUsers_Call) Run(run func(ctx context.Context)) *UserFetcher_GetUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *UserFetcher_GetUsers_Call) Return(_a0 []data.User, _a1 error) *UserFetcher_GetUsers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserFetcher_GetUsers_Call) RunAndReturn(run func(context.Context) ([]data.User, error)) *UserFetcher_GetUsers_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, owner
func (_m *UserFetcher) Update(ctx context.Context, owner data.UserWithNoBooks) (data.UserWithNoBooks, error) {
	ret := _m.Called(ctx, owner)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 data.UserWithNoBooks
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, data.UserWithNoBooks) (data.UserWithNoBooks, error)); ok {
		return rf(ctx, owner)
	}
	if rf, ok := ret.Get(0).(func(context.Context, data.UserWithNoBooks) data.UserWithNoBooks); ok {
		r0 = rf(ctx, owner)
	} else {
		r0 = ret.Get(0).(data.UserWithNoBooks)
	}

	if rf, ok := ret.Get(1).(func(context.Context, data.UserWithNoBooks) error); ok {
		r1 = rf(ctx, owner)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserFetcher_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type UserFetcher_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - owner data.UserWithNoBooks
func (_e *UserFetcher_Expecter) Update(ctx interface{}, owner interface{}) *UserFetcher_Update_Call {
	return &UserFetcher_Update_Call{Call: _e.mock.On("Update", ctx, owner)}
}

func (_c *UserFetcher_Update_Call) Run(run func(ctx context.Context, owner data.UserWithNoBooks)) *UserFetcher_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(data.UserWithNoBooks))
	})
	return _c
}

func (_c *UserFetcher_Update_Call) Return(_a0 data.UserWithNoBooks, _a1 error) *UserFetcher_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserFetcher_Update_Call) RunAndReturn(run func(context.Context, data.UserWithNoBooks) (data.UserWithNoBooks, error)) *UserFetcher_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserFetcher creates a new instance of UserFetcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserFetcher(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserFetcher {
	mock := &UserFetcher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
