// Code generated by mockery v2.52.3. DO NOT EDIT.

package mocks

import (
	context "context"

	data "github.com/ehrktia/lendbook/internal/data"
	mock "github.com/stretchr/testify/mock"
)

// Commander is an autogenerated mock type for the Commander type
type Commander struct {
	mock.Mock
}

type Commander_Expecter struct {
	mock *mock.Mock
}

func (_m *Commander) EXPECT() *Commander_Expecter {
	return &Commander_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, owner
func (_m *Commander) Create(ctx context.Context, owner data.User) (int64, error) {
	ret := _m.Called(ctx, owner)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, data.User) (int64, error)); ok {
		return rf(ctx, owner)
	}
	if rf, ok := ret.Get(0).(func(context.Context, data.User) int64); ok {
		r0 = rf(ctx, owner)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, data.User) error); ok {
		r1 = rf(ctx, owner)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Commander_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type Commander_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - owner data.User
func (_e *Commander_Expecter) Create(ctx interface{}, owner interface{}) *Commander_Create_Call {
	return &Commander_Create_Call{Call: _e.mock.On("Create", ctx, owner)}
}

func (_c *Commander_Create_Call) Run(run func(ctx context.Context, owner data.User)) *Commander_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(data.User))
	})
	return _c
}

func (_c *Commander_Create_Call) Return(_a0 int64, _a1 error) *Commander_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Commander_Create_Call) RunAndReturn(run func(context.Context, data.User) (int64, error)) *Commander_Create_Call {
	_c.Call.Return(run)
	return _c
}

// GetById provides a mock function with given fields: ctx, id
func (_m *Commander) GetById(ctx context.Context, id float64) (data.User, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetById")
	}

	var r0 data.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, float64) (data.User, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, float64) data.User); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(data.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, float64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Commander_GetById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetById'
type Commander_GetById_Call struct {
	*mock.Call
}

// GetById is a helper method to define mock.On call
//   - ctx context.Context
//   - id float64
func (_e *Commander_Expecter) GetById(ctx interface{}, id interface{}) *Commander_GetById_Call {
	return &Commander_GetById_Call{Call: _e.mock.On("GetById", ctx, id)}
}

func (_c *Commander_GetById_Call) Run(run func(ctx context.Context, id float64)) *Commander_GetById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(float64))
	})
	return _c
}

func (_c *Commander_GetById_Call) Return(_a0 data.User, _a1 error) *Commander_GetById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Commander_GetById_Call) RunAndReturn(run func(context.Context, float64) (data.User, error)) *Commander_GetById_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, owner
func (_m *Commander) Update(ctx context.Context, owner data.UserWithNoBooks) (data.UserWithNoBooks, error) {
	ret := _m.Called(ctx, owner)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 data.UserWithNoBooks
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, data.UserWithNoBooks) (data.UserWithNoBooks, error)); ok {
		return rf(ctx, owner)
	}
	if rf, ok := ret.Get(0).(func(context.Context, data.UserWithNoBooks) data.UserWithNoBooks); ok {
		r0 = rf(ctx, owner)
	} else {
		r0 = ret.Get(0).(data.UserWithNoBooks)
	}

	if rf, ok := ret.Get(1).(func(context.Context, data.UserWithNoBooks) error); ok {
		r1 = rf(ctx, owner)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Commander_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type Commander_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - owner data.UserWithNoBooks
func (_e *Commander_Expecter) Update(ctx interface{}, owner interface{}) *Commander_Update_Call {
	return &Commander_Update_Call{Call: _e.mock.On("Update", ctx, owner)}
}

func (_c *Commander_Update_Call) Run(run func(ctx context.Context, owner data.UserWithNoBooks)) *Commander_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(data.UserWithNoBooks))
	})
	return _c
}

func (_c *Commander_Update_Call) Return(_a0 data.UserWithNoBooks, _a1 error) *Commander_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Commander_Update_Call) RunAndReturn(run func(context.Context, data.UserWithNoBooks) (data.UserWithNoBooks, error)) *Commander_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewCommander creates a new instance of Commander. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCommander(t interface {
	mock.TestingT
	Cleanup(func())
}) *Commander {
	mock := &Commander{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
