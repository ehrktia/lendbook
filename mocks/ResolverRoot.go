// Code generated by mockery v2.50.4. DO NOT EDIT.

package mocks

import (
	graph "github.com/ehrktia/lendbook/internal/graph"
	mock "github.com/stretchr/testify/mock"
)

// ResolverRoot is an autogenerated mock type for the ResolverRoot type
type ResolverRoot struct {
	mock.Mock
}

type ResolverRoot_Expecter struct {
	mock *mock.Mock
}

func (_m *ResolverRoot) EXPECT() *ResolverRoot_Expecter {
	return &ResolverRoot_Expecter{mock: &_m.Mock}
}

// Query provides a mock function with no fields
func (_m *ResolverRoot) Query() graph.QueryResolver {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Query")
	}

	var r0 graph.QueryResolver
	if rf, ok := ret.Get(0).(func() graph.QueryResolver); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(graph.QueryResolver)
		}
	}

	return r0
}

// ResolverRoot_Query_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Query'
type ResolverRoot_Query_Call struct {
	*mock.Call
}

// Query is a helper method to define mock.On call
func (_e *ResolverRoot_Expecter) Query() *ResolverRoot_Query_Call {
	return &ResolverRoot_Query_Call{Call: _e.mock.On("Query")}
}

func (_c *ResolverRoot_Query_Call) Run(run func()) *ResolverRoot_Query_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ResolverRoot_Query_Call) Return(_a0 graph.QueryResolver) *ResolverRoot_Query_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ResolverRoot_Query_Call) RunAndReturn(run func() graph.QueryResolver) *ResolverRoot_Query_Call {
	_c.Call.Return(run)
	return _c
}

// NewResolverRoot creates a new instance of ResolverRoot. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewResolverRoot(t interface {
	mock.TestingT
	Cleanup(func())
}) *ResolverRoot {
	mock := &ResolverRoot{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
