// Code generated by mockery v2.50.4. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "github.com/ehrktia/lendbook/internal/graph/model"
)

// QueryResolver is an autogenerated mock type for the QueryResolver type
type QueryResolver struct {
	mock.Mock
}

type QueryResolver_Expecter struct {
	mock *mock.Mock
}

func (_m *QueryResolver) EXPECT() *QueryResolver_Expecter {
	return &QueryResolver_Expecter{mock: &_m.Mock}
}

// BookByOwnerID provides a mock function with given fields: ctx, id
func (_m *QueryResolver) BookByOwnerID(ctx context.Context, id float64) ([]*model.Book, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for BookByOwnerID")
	}

	var r0 []*model.Book
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, float64) ([]*model.Book, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, float64) []*model.Book); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Book)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, float64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryResolver_BookByOwnerID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BookByOwnerID'
type QueryResolver_BookByOwnerID_Call struct {
	*mock.Call
}

// BookByOwnerID is a helper method to define mock.On call
//   - ctx context.Context
//   - id float64
func (_e *QueryResolver_Expecter) BookByOwnerID(ctx interface{}, id interface{}) *QueryResolver_BookByOwnerID_Call {
	return &QueryResolver_BookByOwnerID_Call{Call: _e.mock.On("BookByOwnerID", ctx, id)}
}

func (_c *QueryResolver_BookByOwnerID_Call) Run(run func(ctx context.Context, id float64)) *QueryResolver_BookByOwnerID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(float64))
	})
	return _c
}

func (_c *QueryResolver_BookByOwnerID_Call) Return(_a0 []*model.Book, _a1 error) *QueryResolver_BookByOwnerID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *QueryResolver_BookByOwnerID_Call) RunAndReturn(run func(context.Context, float64) ([]*model.Book, error)) *QueryResolver_BookByOwnerID_Call {
	_c.Call.Return(run)
	return _c
}

// Books provides a mock function with given fields: ctx
func (_m *QueryResolver) Books(ctx context.Context) ([]*model.Book, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Books")
	}

	var r0 []*model.Book
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*model.Book, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*model.Book); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Book)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryResolver_Books_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Books'
type QueryResolver_Books_Call struct {
	*mock.Call
}

// Books is a helper method to define mock.On call
//   - ctx context.Context
func (_e *QueryResolver_Expecter) Books(ctx interface{}) *QueryResolver_Books_Call {
	return &QueryResolver_Books_Call{Call: _e.mock.On("Books", ctx)}
}

func (_c *QueryResolver_Books_Call) Run(run func(ctx context.Context)) *QueryResolver_Books_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *QueryResolver_Books_Call) Return(_a0 []*model.Book, _a1 error) *QueryResolver_Books_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *QueryResolver_Books_Call) RunAndReturn(run func(context.Context) ([]*model.Book, error)) *QueryResolver_Books_Call {
	_c.Call.Return(run)
	return _c
}

// UserByID provides a mock function with given fields: ctx, id
func (_m *QueryResolver) UserByID(ctx context.Context, id float64) (*model.User, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for UserByID")
	}

	var r0 *model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, float64) (*model.User, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, float64) *model.User); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, float64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryResolver_UserByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UserByID'
type QueryResolver_UserByID_Call struct {
	*mock.Call
}

// UserByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id float64
func (_e *QueryResolver_Expecter) UserByID(ctx interface{}, id interface{}) *QueryResolver_UserByID_Call {
	return &QueryResolver_UserByID_Call{Call: _e.mock.On("UserByID", ctx, id)}
}

func (_c *QueryResolver_UserByID_Call) Run(run func(ctx context.Context, id float64)) *QueryResolver_UserByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(float64))
	})
	return _c
}

func (_c *QueryResolver_UserByID_Call) Return(_a0 *model.User, _a1 error) *QueryResolver_UserByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *QueryResolver_UserByID_Call) RunAndReturn(run func(context.Context, float64) (*model.User, error)) *QueryResolver_UserByID_Call {
	_c.Call.Return(run)
	return _c
}

// Users provides a mock function with given fields: ctx
func (_m *QueryResolver) Users(ctx context.Context) ([]*model.User, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Users")
	}

	var r0 []*model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*model.User, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*model.User); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryResolver_Users_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Users'
type QueryResolver_Users_Call struct {
	*mock.Call
}

// Users is a helper method to define mock.On call
//   - ctx context.Context
func (_e *QueryResolver_Expecter) Users(ctx interface{}) *QueryResolver_Users_Call {
	return &QueryResolver_Users_Call{Call: _e.mock.On("Users", ctx)}
}

func (_c *QueryResolver_Users_Call) Run(run func(ctx context.Context)) *QueryResolver_Users_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *QueryResolver_Users_Call) Return(_a0 []*model.User, _a1 error) *QueryResolver_Users_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *QueryResolver_Users_Call) RunAndReturn(run func(context.Context) ([]*model.User, error)) *QueryResolver_Users_Call {
	_c.Call.Return(run)
	return _c
}

// NewQueryResolver creates a new instance of QueryResolver. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewQueryResolver(t interface {
	mock.TestingT
	Cleanup(func())
}) *QueryResolver {
	mock := &QueryResolver{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
