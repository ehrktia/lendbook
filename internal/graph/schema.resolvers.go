package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.70

import (
	"context"
	"fmt"

	model1 "github.com/ehrktia/lendbook/internal/graph/model"
)

// Books is the resolver for the books field.
func (r *queryResolver) Books(ctx context.Context) (*model1.BookList, error) {
	panic(fmt.Errorf("not implemented: Books - books"))
}

// BookByOwnerID is the resolver for the bookByOwnerId field.
func (r *queryResolver) BookByOwnerID(ctx context.Context, id float64) ([]*model1.Book, error) {
	panic(fmt.Errorf("not implemented: BookByOwnerID - bookByOwnerId"))
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model1.User, error) {
	panic(fmt.Errorf("not implemented: Users - users"))
}

// UserByID is the resolver for the userById field.
func (r *queryResolver) UserByID(ctx context.Context, id float64) (*model1.User, error) {
	user, err := r.UserService.GetById(ctx, id)
	if err != nil {
		return nil, err
	}
	return &user, nil
}

// UserByEmail is the resolver for the userByEmail field.
func (r *queryResolver) UserByEmail(ctx context.Context, email string) (*model1.User, error) {
	panic(fmt.Errorf("not implemented: UserByEmail - userByEmail"))
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
